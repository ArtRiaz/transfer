from aiogram import Router, F, types, Bot
from aiogram.types import Message
from tgbot.filters.admin import AdminFilter
from aiogram.filters import Command
import logging
from aiogram.fsm.context import FSMContext
from aiogram.filters import StateFilter
from aiogram.types import FSInputFile

from infrastructure.database.repo.requests import RequestsRepo

admin_router = Router()
admin_router.message.filter(AdminFilter())


@admin_router.message(Command("post"))
async def broadcast_message(message: types.Message, state: FSMContext):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–†–æ–∑—Å–∏–ª–∞–Ω–Ω—è". –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç —Ç–µ–∫—Å—Ç –∏ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ) —Ñ–æ—Ç–æ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏.
    """
    await state.set_state("broadcast")
    await message.answer("Enter the message text for the broadcast. You can also attach an image.\n"
                         "If you want to add a button, use the format:\n"
                         "Message text | Button text | Button URL")


@admin_router.message(StateFilter("broadcast"))
async def process_broadcast_message(message: types.Message, state: FSMContext, repo: RequestsRepo, bot: Bot):
    """
        –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ä–∞—Å—Å—ã–ª–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö, —Å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å—é –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–æ—Ç–æ –∏ inline-–∫–Ω–æ–ø–∫–∏.
        """
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è (–∏–∑ caption, –µ—Å–ª–∏ –µ—Å—Ç—å —Ñ–æ—Ç–æ)
    text_input = message.caption if message.photo else message.text
    photo = message.photo[-1].file_id if message.photo else None

    if not text_input and not photo:
        await message.answer("Please send text or an image for the broadcast.")
        return

    # –†–∞–∑–±–∏—Ä–∞–µ–º —Ç–µ–∫—Å—Ç –∏ inline-–∫–Ω–æ–ø–∫—É
    button = None
    if text_input and " | " in text_input:  # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª–∏
        parts = text_input.split(" | ")
        if len(parts) == 3:
            broadcast_text, button_text, button_url = parts
            button = types.InlineKeyboardMarkup(
                inline_keyboard=[[types.InlineKeyboardButton(text=button_text.strip(), url=button_url.strip())]]
            )
        else:
            broadcast_text = text_input  # –ï—Å–ª–∏ —Ñ–æ—Ä–º–∞—Ç –Ω–µ–≤–µ—Ä–Ω—ã–π, –∏—Å–ø–æ–ª—å–∑—É–µ–º –≤–µ—Å—å —Ç–µ–∫—Å—Ç –±–µ–∑ –∫–Ω–æ–ø–∫–∏
    else:
        broadcast_text = text_input

    try:
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        users = await repo.users.count_users()

        if not users:
            await message.answer("The database is empty. There is no one to send the message to.")
            await state.clear()
            return

        success_count = 0
        fail_count = 0

        for user_id, username in users:
            try:
                if photo:  # –ï—Å–ª–∏ –µ—Å—Ç—å —Ñ–æ—Ç–æ, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –µ–≥–æ —Å –ø–æ–¥–ø–∏—Å—å—é –∏ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ) –∫–Ω–æ–ø–∫–æ–π
                    await bot.send_photo(
                        chat_id=user_id,
                        photo=photo,
                        caption=broadcast_text,
                        reply_markup=button if button else None
                    )
                else:  # –ï—Å–ª–∏ —Ñ–æ—Ç–æ –Ω–µ—Ç, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç —Å (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ) –∫–Ω–æ–ø–∫–æ–π
                    await bot.send_message(
                        chat_id=user_id,
                        text=broadcast_text,
                        reply_markup=button if button else None
                    )

                success_count += 1
            except Exception as e:
                logging.error(f"Failed to send a message to the user {user_id}: {e}")
                fail_count += 1

        await message.answer(
            f"Broadcast completed!\n"
            f"‚úÖ Successful: {success_count}\n"
            f"‚ùå Failed: {fail_count}"
        )

    except Exception as e:
        logging.error(f"Error during broadcast: {e}")
        await message.answer("An error occurred during the broadcast. Please try again later.")

    await state.clear()


@admin_router.message(Command("clear"))
async def clear_users_command(message: types.Message, repo: RequestsRepo):
    await repo.users.clear_users()
    await message.answer("‚úÖ All users have been deleted from the database.")


@admin_router.message(Command("base"))
async def show_database(message: types.Message, repo: RequestsRepo):
    """–í—ã–≤–æ–¥–∏—Ç –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
    users = await repo.users.get_all_users()

    if not users:
        await message.answer("üìÇ The database is empty.")
        return

    response = "üìä User Database:\n\n"
    for user in users:
        response += (
            f"üë§ ID: {user.user_id}\n"
            f"üìõ Name: {user.full_name}\n"
            f"üîó Username: @{user.username if user.username else 'N/A'}\n"
            f"üí∞ Transactions: {'‚úÖ' if user.transactions else '‚ùå'}\n"
            f"üíµ Total Amount: {user.amount_tx / 1_000_000_000:.9f} SOL\n"
            f"üéÅ Referral Bonus: {user.referral_bonus / 1_000_000_000:.9f} SOL\n"
            f"üë• Referred Users: {user.refer}\n"
            "------------------------\n"
        )

    await message.answer(response)
