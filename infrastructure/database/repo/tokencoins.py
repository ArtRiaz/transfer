from sqlalchemy import select, func
from sqlalchemy.dialects.postgresql import insert
from infrastructure.database.models import TokenRate
from infrastructure.database.repo.base import BaseRepo
from sqlalchemy.ext.asyncio import AsyncSession
from datetime import date
from typing import Optional


class TokenCoinRepo(BaseRepo):

    async def get_rate(self) -> Optional[float]:
        """–ü–æ–ª—É—á–∏—Ç—å –∫—É—Ä—Å —Ç–æ–∫–µ–Ω–∞ –∑–∞ —Å–µ–≥–æ–¥–Ω—è"""
        result = await self.session.execute(
            select(TokenRate.rate).filter(TokenRate.date == date.today())
        )
        rate = result.scalar()
        print(f"üìå get_rate(): {rate}")  # –õ–æ–≥–∏—Ä—É–µ–º –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
        return rate  # –í–µ—Ä–Ω—ë—Ç None, –µ—Å–ª–∏ –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö

    async def set_rate(self, new_rate: float):
        """–û–±–Ω–æ–≤–∏—Ç—å –∏–ª–∏ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∫—É—Ä—Å —Ç–æ–∫–µ–Ω–∞ –Ω–∞ —Ç–µ–∫—É—â–∏–π –¥–µ–Ω—å"""
        stmt = (
            insert(TokenRate)
            .values(
                date=date.today(),
                rate=new_rate,
                updated_at=func.now(),
                created_at=func.now()  # ‚úÖ `created_at`, –µ—Å–ª–∏ –∑–∞–ø–∏—Å—å —Å–æ–∑–¥–∞—ë—Ç—Å—è –≤–ø–µ—Ä–≤—ã–µ
            )
            .on_conflict_do_update(
                index_elements=["date"],
                set_={"rate": new_rate, "updated_at": func.now()}
            )
        )
        await self.session.execute(stmt)
        await self.session.commit()

